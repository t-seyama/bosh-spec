#---
#agent:
#  blobstore:
#    access_key_id: "(( inline ))"  # AWS access_key_id for agent used by s3 blobstore plugin
#    address: "(( inline ))"  # Address for agent to connect to blobstore server used by simple blobstore plugin
#    credentials_source: static  # AWS credentials (static / env_or_profile)
#    host: "(( inline ))"  # Host of blobstore server used by simple blobstore plugin
#    port: "(( inline ))"  # Port for agent to connect to blobstore server used by simple blobstore plugin
#    s3_region: "(( inline ))"  # AWS region for agent used by s3 blobstore plugin
#    s3_signature_version: "(( inline ))"  # Signature version of the blobstore used by s3 blobstore plugin (optional, if not provided the s3 client decides which version to use)
#    secret_access_key: "(( inline ))"  # AWS secret_access_key for agent used by s3 blobstore plugin
#    server_side_encryption: "(( inline ))"  # Server-side encryption algorithm used when storing blobs in S3 (Optional - "AES256"|"aws:kms")
#    sse_kms_key_id: "(( inline ))"  # AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4.
#    ssl_verify_peer: true  # Verify the SSL certificate used on the blobstore?
#    use_ssl: true  # Whether the simple blobstore plugin should use SSL to connect to the blobstore server
#  nats:
#    address: "(( inline ))"  # Address for agent to connect to nats
#aws:
#  access_key_id: "(( inline ))"  # AWS IAM Access Key ID
#  credentials_source: static  # AWS credentials source
#  ec2_endpoint: "(( inline ))"  # The service endpoint for Amazon EC2 (optional, if not supplied default region endpoint will be used)
#  elb_endpoint: "(( inline ))"  # The service endpoint for Amazon Elastic Load Balancing (optional, if not supplied default region endpoint will be used)
#  max_retries: 2  # Max number of retries to connect to AWS
#  region: "(( inline ))"  # AWS EC2 Region
#  secret_access_key: "(( inline ))"  # AWS IAM Secret Access Key
#  ssl_ca_file: "(( inline ))"  # The path to a CA cert bundle in PEM format
#  ssl_ca_path: "(( inline ))"  # The path the a CA cert directory
#  ssl_verify_peer: "(( inline ))"  # When true the HTTP handler validate server certificates for HTTPS requests
#blobstore:
#  access_key_id: "(( inline ))"  # AWS access_key_id used by s3 blobstore plugin
#  address: "(( inline ))"  # Address of blobstore server used by simple blobstore plugin
#  agent:
#    password: "(( inline ))"  # Password agent uses to connect to blobstore used by simple blobstore plugin
#    user: "(( inline ))"  # Username agent uses to connect to blobstore used by simple blobstore plugin
#  backend_port: 25251  # TCP port backend blobstore server (simple blobstore) listens on
#  bucket_name: "(( inline ))"  # AWS S3 Bucket used by s3 blobstore plugin
#  credentials_source: static  # AWS Credential Source (static / env_or_profile)
#  director:
#    password: "(( inline ))"  # Password director uses to connect to blobstore used by simple blobstore plugin
#    user: "(( inline ))"  # Username director uses to connect to blobstore used by simple blobstore plugin
#  host: "(( inline ))"  # Host of blobstore server used by simple blobstore plugin
#  max_upload_size: 5000m  # Max allowed file size for upload
#  nginx:
#    workers: 2  # Number of nginx workers for blobstore
#  port: 25250  # Port of blobstore server used by simple blobstore plugin
#  provider: dav  # Provider of the blobstore used by director and agent (dav|simple|s3)
#  s3_port: 443  # Port of blobstore server used by s3 blobstore plugin
#  s3_region: "(( inline ))"  # Region of the blobstore used by s3 blobstore plugin
#  s3_signature_version: "(( inline ))"  # Signature version of the blobstore used by s3 blobstore plugin (optional, if not provided the s3 client decides which version to use)
#  secret_access_key: "(( inline ))"  # AWS secret_access_key used by s3 blobstore plugin
#  server_side_encryption: "(( inline ))"  # Server-side encryption algorithm used when storing blobs in S3 (Optional - "AES256"|"aws:kms")
#  sse_kms_key_id: "(( inline ))"  # AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4.
#  ssl_verify_peer: true  # Verify the SSL certificate used on the blobstore?
#  use_ssl: true  # Whether the simple blobstore plugin should use SSL to connect to the blobstore server
#compiled_package_cache:
#  options:
#    access_key_id: "(( inline ))"  # AWS access_key_id used for the compiled package cache
#    bucket_name: "(( inline ))"  # AWS S3 Bucket used for the compiled package cache
#    credentials_source: static  # AWS credentials (static / env_or_profile)
#    host: "(( inline ))"  # Host of blobstore server used for compiled package cache
#    port: 25250  # Port of blobstore server used for compiled package cache
#    s3_port: 443  # Port of blobstore server used by s3 blobstore plugin
#    s3_signature_version: "(( inline ))"  # Signature version of the blobstore used by s3 blobstore plugin (optional, if not provided the s3 client decides which version to use)
#    secret_access_key: "(( inline ))"  # AWS secret_access_key used for the compiled package cache
#    server_side_encryption: "(( inline ))"  # Server-side encryption algorithm used when storing blobs in S3 (Optional - "AES256"|"aws:kms")
#    sse_kms_key_id: "(( inline ))"  # AWS KMS key ID to use for object encryption. All GET and PUT requests for an object protected by AWS KMS will fail if not made via SSL or using SigV4.
#    ssl_verify_peer: true  # Verify the SSL certificate used on the blobstore?
#    use_ssl: true  # Whether the simple blobstore plugin should use SSL to connect to the blobstore server
#  provider: s3  # Provider of the blobstore used for the compiled package cache
#director:
#  address: "(( inline ))"  # Address of the Bosh Director to connect to
#  auto_fix_stateful_nodes: true  # Enable/Disable auto resolution for stateful nodes for scan_and_fix (true|false)
#  backend_port: 25556  # Port that the director listens on
#  backup_destination: "(( inline ))"  # Configuration of the blobstore used by director for backups (dav|simple|s3)
#  backup_schedule: "(( inline ))"  # RufusScheduler cron formatted schedule for backups
#  config_server:
#    ca_cert: "(( inline ))"  # CA cert to trust when communicating with Config Server
#    enabled: false  # When true, replace substitution values in manifest with values from Config Server
#    uaa:
#      ca_cert: "(( inline ))"  # CA cert to trust when communicating with UAA
#      client_id: "(( inline ))"  # UAA client id to access Config Server
#      client_secret: "(( inline ))"  # UAA client secret to access Config Server
#      url: "(( inline ))"  # URL for the UAA server used for authenticating access to Config Server
#    url: "(( inline ))"  # URL for the Config Server
#  cpi_job: "(( inline ))"  # Name of cpi job (null to use bundled cpi gems)
#  db:
#    adapter: postgres  # The type of database used (mysql2|postgres|sqlite)
#    connection_options:
#      max_connections: 32
#      pool_timeout: 10
#    database: bosh  # Name of the director database
#    host: 127.0.0.1  # |
#    password: "(( inline ))"  # Password used for the director database
#    port: 5432  # Port of the director database (e.g, msyql2 adapter would generally use 3306)
#    user: bosh  # Username used for the director database
#  debug:
#    keep_unreachable_vms: false  # When a bosh deploy fails, the failed VM will be kept instead of destroyed
#  default_ssh_options:
#    gateway_host: "(( inline ))"  # Default host to use as ssh gateway with bosh ssh command
#    gateway_user: vcap  # Default user to use with bosh ssh command
#  disks:
#    cleanup_schedule: 0 0,30 * * * * UTC  # RufusScheduler cron formatted schedule for cleanup of orphaned disks and orphaned snapshots
#    max_orphaned_age_in_days: 5  # Days to keep orphaned disks and orhaned snapshots before cleanup
#  enable_dedicated_status_worker: false  # Separate worker for 'bosh vms' and 'bosh ssh'
#  enable_post_deploy: false  # When true, all templates will run their post_deploy script once deployment is complete
#  enable_snapshots: false  # Enable/Disable snapshots for persistent disks (true|false)
#  enable_virtual_delete_vms: false  # When true, bosh will not delete vm from cloud when instance update, just destroy vm record in db
#  encryption: false  # Enable/Disable agent-director encryption (true|false)
#  events:
#    cleanup_schedule: 0 * * * * UTC  # RufusScheduler cron formatted schedule for cleanup of events
#    max_events: 10000  # Max number of events to keep
#    record_events: false  # Enable recording of events to the database and syslog
#  flush_arp: false  # Clear up arp entries when machines are recreated
#  generate_vm_passwords: false  # When true, a random unique password will be used for each vm if user has not specified a password
#  ignore_missing_gateway: false  # Allow gateway to be omitted from subnet configuration. Boshlite vms(containers) do not require gateway.
#  local_dns: {}  # Enables local DNS, i.e., sending sync_dns messages with all names/IPs to all agents managed by this director
#  log_access_events_to_syslog: false  # Access to api is logged to the syslog
#  max_tasks: 100  # Max number of tasks per each type to keep in disk
#  max_threads: 32  # Max number of director concurrent threads
#  max_upload_size: 10000m  # Max allowed file size for upload
#  max_vm_create_tries: 5  # Max retries when creating VMs
#  name: "(( inline ))"  # Name of the director
#  nginx:
#    ssl_ciphers: ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK  # https://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT)'
#    ssl_prefer_server_ciphers: true  # Prefer server's cipher priority instead of client's (true for On, false for Off)
#    ssl_protocols: TLSv1 TLSv1.1 TLSv1.2  # SSL/TLS protocols to allow
#    workers: 2  # Number of nginx workers for director
#  port: 25555  # Port of the Bosh Director to connect to
#  proxy_timeout: 900  # Timeout for proxy connection from nginx to director
#  remove_dev_tools: false  # When true, remove dev tool packages from non-compilation VMs
#  self_snapshot_schedule: 0 0 6 * * * UTC  # RufusScheduler cron formatted schedule for self snapshots
#  snapshot_schedule: 0 0 7 * * * UTC  # RufusScheduler cron formatted schedule for snapshots
#  ssl:
#    cert: "(( inline ))"  # SSL Certificate for director (PEM encoded)
#    key: "(( inline ))"  # SSL private key for director (PEM encoded)
#  timeout: 7200  # Timeout for connection from bosh CLI to nginx
#  trusted_certs: ''  # Cerfiticates that VMs created by this director should trust in addition to those packaged with the stemcell (PEM encoded; zero or more certs allowed)
#  user_management:
#    local:
#      users: "(( inline ))"  # List of users that can authenticate with director in non-Uaa mode
#    provider: local  # User management implementation (local|uaa)
#    uaa:
#      public_key: "(( inline ))"  # Public key to verify Uaa token when token is encoded with asymmetric encryption
#      symmetric_key: "(( inline ))"  # Symmetric key to verify Uaa token
#      url: "(( inline ))"  # Uaa URL, specify either the url or the urls attribute
#      urls: "(( inline ))"  # List of Uaa URLs, specify either the url or the urls attribute
#  workers: 3  # Number of director workers
#dns:
#  address: "(( inline ))"  # Address of the primary PowerDNS instance
#  db:
#    adapter: postgres  # Adapter for the PowerDNS database connection
#    connection_options:
#      max_connections: 32
#      pool_timeout: 10
#    database: bosh  # Database for the PowerDNS database connection
#    host: 127.0.0.1  # Address for the PowerDNS database
#    password: "(( inline ))"  # Password for the PowerDNS database connection
#    port: 5432  # Port for the PowerDNS database connection
#    user: bosh  # User for the PowerDNS database connection
#  distributor_threads: 2  # Number of threads to query the backend, for each receiver thread
#  domain_name: bosh  # TLD of the dns zone used by bosh
#  local_address: "(( inline ))"  # IP address to which to bind to (optional; useful with multiple IP addresses)
#  query_local_address: "(( inline ))"  # IP address to use as a source address for sending queries (optional; useful with multiple IP addresses)
#  receiver_threads: 2  # Number of sockets the powerdns process will open
#  recursor: "(( inline ))"  # If recursion is desired, IP address of a recursing nameserver (optional)
#  webserver:
#    address: 0.0.0.0  # IP address PowerDNS webserver listens on (optional)
#    password: "(( inline ))"  # Password clients must use to access PowerDNS webserver (optional)
#    port: 8081  # TCP port PowerDNS webserver listens on (optional)
#env:
#  http_proxy: "(( inline ))"  # HTTP proxy that the registry should use
#  https_proxy: "(( inline ))"  # HTTPS proxy that the registry should use
#  no_proxy: "(( inline ))"  # List of comma-separated hosts that should skip connecting to the proxy in the registry
#event_nats:
#  address: "(( inline ))"  # Address of the event NATS message bus to connect to
#  password: "(( inline ))"  # Password for event NATS message bus connection
#  port: "(( inline ))"  # Port of the event NATS message bus port to connect to
#  user: "(( inline ))"  # User for the event NATS message bus connection
#event_nats_enabled: false  # Enable event NATS message bus plugin
#hm:
#  cloud_watch_enabled: false  # Enable AWS CloudWatch Plugin
#  consul_event_forwarder:
#    events: false  # Whether or not to use the events api
#    heartbeats_as_alerts: false  # Should we treat all heartbeats as alerts as well?
#    host: "(( inline ))"  # Location of Consul Cluster or agent
#    namespace: "(( inline ))"  # A namespace for handling multiples of the same release
#    params: "(( inline ))"  # Params for url can be used for passing ACL token
#    port: 8500  # Consul Port
#    protocol: http  # http/https
#    ttl: "(( inline ))"  # A ttl time for ttl checks, if set ttl checks will be used
#    ttl_note: Automatically Registered by Bosh-Monitor  # A note for ttl checks
#  consul_event_forwarder_enabled: false  # Enable Consul Plugin
#  datadog:
#    api_key: "(( inline ))"  # API Key for DataDog
#    application_key: "(( inline ))"  # Health Monitor Application Key for DataDog
#    pagerduty_service_name: "(( inline ))"  # Service name to alert in PagerDuty upon HM events
#  datadog_enabled: false  # Enable DataDog plugin
#  director_account:
#    ca_cert: ''  # Certificate to verify UAA endpoint
#    client_id: ''  # UAA client id to access Bosh Director
#    client_secret: ''  # UAA client secret to access Bosh Director
#    password: ''  # Password to access Bosh Director
#    user: ''  # User to access Bosh Director
#  em_threadpool_size: 20  # EM thread pool size
#  email_interval: "(( inline ))"  # Interval (in seconds) to deliver alerts by email (optional)
#  email_notifications: false  # Enable email notifications plugin
#  email_recipients: "(( inline ))"  # Email of recipients (Array)
#  graphite:
#    address: "(( inline ))"  # Graphite address
#    port: "(( inline ))"  # Graphite port
#    prefix: "(( inline ))"  # Prefix that will be added to all metrics sent to Graphite
#  graphite_enabled: false  # Enable Graphite plugin
#  http:
#    port: 25923  # TCP port Health Monitor daemon listens on
#  intervals:
#    agent_timeout: 60  # Interval (in seconds) to consider an agent has timed out
#    analyze_agents: 60  # Interval (in seconds) to analyze the status of agents
#    analyze_instances: 60  # Interval (in seconds) to analyze the status of instances for missing VMs
#    log_stats: 60  # Interval (in seconds) to log Health Monitor statistics
#    poll_director: 60  # Interval (in seconds) to get the list of managed VMs from Bosh Director
#    poll_grace_period: 30  # Interval (in seconds) between discovering managed VMs and analyzing their status
#    prune_events: 30  # Interval (in seconds) to prune received events
#    rogue_agent_alert: 120  # Interval (in seconds) to consider an agent as rogue (an agent that is no part of any deployment)
#  loglevel: info  # Level of log messages (fatal, error, warn, info, debug)
#  pagerduty:
#    http_proxy: "(( inline ))"  # HTTP proxy to connect to PagerDuty (optional)
#    service_key: "(( inline ))"  # PagerDuty service API key
#  pagerduty_enabled: false  # Enable PagerDuty plugin
#  resurrector:
#    minimum_down_jobs: 5  # If the total number of down jobs in a deployment is below this threshold, the resurrector will always request a down job be recreated
#    percent_threshold: 0.2  # Percentage of total jobs in a deployment that must be down for the resurrector to to stop sending recreate-job requests. Used in 'meltdown' situations so resurrector will not try to recreate the world.
#    time_threshold: 600  # Time (in seconds) for which an alert in the resurrector is considered 'current'; alerts older than this are ignored when deciding to recreate a job.
#  resurrector_enabled: false  # Enable VM resurrector plugin
#  riemann:
#    host: "(( inline ))"  # Riemann host
#    port: 5555  # Riemann port
#  riemann_enabled: false  # Enable Riemann plugin
#  smtp:
#    auth: "(( inline ))"  # SMTP Authentication type (optional, only "plain" is supported)
#    domain: "(( inline ))"  # SMTP EHLO domain (typically server's fully qualified domain name, e.g. "bosh.cfapps.io")
#    from: "(( inline ))"  # Email of sender, e.g. "bosh-director@cfapps.io"
#    host: "(( inline ))"  # Address of the SMTP server to connect to (e.g. "smtp.gmail.com")
#    password: "(( inline ))"  # Password for SMTP Authentication (optional, use in conjuction with hm.smtp.auth)
#    port: "(( inline ))"  # Port of the SMTP server to connect to (e.g. 25, 465, or 587)
#    tls: "(( inline ))"  # Use STARTTLS (optional)
#    user: "(( inline ))"  # User for SMTP Authentication (optional, use in conjuction with hm.smtp.auth)
#  syslog_event_forwarder:
#    address: "(( inline ))"  # IP address of the syslog drain
#    custom_rule: ''  # Custom rule for syslog event forwarder
#    port: 5514  # Port of the syslog drain
#    transport: tcp  # One of ["udp", "tcp", "relp"]
#  syslog_event_forwarder_enabled: false  # Enable syslog forwarder plugin
#  tsdb:
#    address: "(( inline ))"  # Address of TSDB to connect to
#    port: "(( inline ))"  # Port of TSDB to connect to
#  tsdb_enabled: false  # Enable TSDB plugin
#nats:
#  address: "(( inline ))"  # Address of the NATS message bus to connect to
#  auth_timeout: 1  # Timeout (in seconds) for clients to send auth credentials
#  http:
#    password: "(( inline ))"  # Password clients must use to access nats mbus via HTTP connection (optional)
#    port: 9222  # TCP port NATS listens on for HTTP connections (optional)
#    user: "(( inline ))"  # Username clients must use to access nats mbus via HTTP connection (optional)
#  listen_address: 0.0.0.0  # IP address nats mbus listens on
#  no_epoll: false  # Disable epoll (Linux)
#  no_kqueue: true  # Disable kqueue (MacOSX and BSD)
#  password: "(( inline ))"  # Password clients must use to access nats mbus
#  ping_interval: 5  # Time interval (in seconds) pings from server
#  ping_max_outstanding: 2  # Maximum number of pings before declaring a client unresponsive
#  port: 4222  # TCP port nats mbus listens on
#  user: "(( inline ))"  # Username clients must use to access nats mbus
#ntp:
#- 0.pool.ntp.org
#- 1.pool.ntp.org
#openstack:
#  api_key: "(( inline ))"  # OpenStack API key
#  auth_url: "(( inline ))"  # URL of the OpenStack Identity endpoint to connect to
#  connection_options: "(( inline ))"  # Hash containing optional connection parameters to the OpenStack API
#  domain: "(( inline ))"  # OpenStack domain (required for Keystone API version 3)
#  endpoint_type: publicURL  # OpenStack endpoint type (optional, by default publicURL)
#  project: "(( inline ))"  # OpenStack project name (required for Keystone API version 3)
#  region: "(( inline ))"  # OpenStack region (optional)
#  tenant: "(( inline ))"  # OpenStack tenant name (required for Keystone API version 2)
#  username: "(( inline ))"  # OpenStack user name
#postgres:
#  additional_databases: []  # Additional Postgres databases to be created (during the startup process)
#  database: bosh  # Default Postgres database (it will be created during the startup process)
#  listen_address: 127.0.0.1  # IP address Postgres listens on; use 0.0.0.0 to listen on all IP addresses
#  max_connections: 100  # Set max concurrent connections for database
#  password: "(( inline ))"  # Password clients must use to access Postgres
#  port: 5432  # TCP port Postgres listens on
#  user: bosh  # Username clients must use to access Postgres
#registry:
#  address: "(( inline ))"  # Address of the Registry to connect to
#  db:
#    adapter: postgres  # The type of database used
#    connection_options:
#      max_connections: 32
#      pool_timeout: 10
#    database: bosh_registry  # Name of the registry database
#    host: 127.0.0.1  # Address of the registry database
#    password: "(( inline ))"  # Password used for the registry database
#    port: 5432  # Port of the registry database
#    user: bosh  # Username used for the registry database
#  http:
#    password: "(( inline ))"  # Password clients must use to access Registry via HTTP Basic Auth
#    port: 25777  # TCP port Registry daemon listens on
#    user: "(( inline ))"  # Username clients must use to access Registry via HTTP Basic Auth
